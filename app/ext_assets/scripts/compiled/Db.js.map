{"version":3,"sources":["../src/Db.js"],"names":["connection","isDbExist","Db_Name","then","isExist","openDb","database","get_Db_Schema","createDb","console","log","catch","err","error","initJsStore","FROM","WHERE","results","select","from","where","response","info","length","__read_DB","IN","SET","isUpdated","update","in","set","rowsUpdated","__update_DB","INTO","VALUES","isAdded","insert","into","values","rowsInserted","message","__add_Item_DB","isRemoved","remove","rowsDeleted","warn","__remove_Item_DB","DB_Erased","dropDb","__drop_DB","authData","productData","isTable_Refresh","isAuth_Table_Update","isProduct_Table_Update","__refresh_DB","tblProduct","name","columns","primaryKey","autoIncrement","notNull","dataType","JsStore","DATA_TYPE","String","dateType","Object","DateTime","Array","tblAuth","Boolean","default","tblWallpaper","db","tables","Instance","Worker"],"mappings":"AAAA;;;;;;;;AAUA;;;qEAqHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACQA,WAAWC,SAAX,CAAqBC,OAArB,EAA8BC,IAA9B,CAAmC,UAASC,OAAT,EAAkB;AACzD,kBAAIA,OAAJ,EAAa;AACXJ,2BAAWK,MAAX,CAAkBH,OAAlB;AACD,eAFD,MAEO;AACL,oBAAII,WAAWC,eAAf;AACAP,2BAAWQ,QAAX,CAAoBF,QAApB;AACAG,wBAAQC,GAAR,CAAYJ,QAAZ;AACD;AACF,aARK,EAQHK,KARG,CAQG,UAASC,GAAT,EAAc;AACrBH,sBAAQI,KAAR,CAAcD,GAAd;AACD,aAVK,CADR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeE,W;;;;;AAef;;sEACA,kBAAyBC,IAAzB,EAA+BC,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AACMC,mBADN,GACgB,EADhB;AAAA;AAAA,mBAEQjB,WAAWkB,MAAX,CAAkB;AACpBC,oBAAMJ,IADc;AAEpBK,qBAAOJ;AAFa,aAAlB,EAIHb,IAJG,CAIE,UAACkB,QAAD,EAAc;AAClB;AACAZ,sBAAQa,IAAR,CAAgBD,SAASE,MAAzB;AACAN,wBAAUI,QAAV;AACD,aARG,EASHV,KATG,CASG,UAACE,KAAD,EAAW;AAChB;AACAJ,sBAAQI,KAAR,CAAcA,KAAd;AACD,aAZG,CAFR;;AAAA;AAAA,8CAgBSI,OAhBT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeO,S;;;;;AAmBf;;;;sEACA,kBAA2BC,EAA3B,EAA+BT,KAA/B,EAAsCU,GAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AACMC,qBADN,GACkB,KADlB;AAAA;AAAA,mBAEQ3B,WAAW4B,MAAX,CAAkB,EAAEC,IAAIJ,EAAN;AACpBL,qBAAOJ,KADa;AAEpBc,mBAAKJ;AAFe,aAAlB,EAIHvB,IAJG,CAIE,UAAC4B,WAAD,EAAiB;AACrB;AACAtB,sBAAQa,IAAR,CAAgBS,WAAhB;AACAJ,0BAAY,IAAZ;AACD,aARG,EASHhB,KATG,CASG,UAACE,KAAD,EAAW;AAChB;AACAJ,sBAAQI,KAAR,CAAcA,KAAd;AACD,aAZG,CAFR;;AAAA;AAAA,8CAgBSc,SAhBT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeK,W;;;;;AAmBf;;;;sEACA,kBAA6BC,IAA7B,EAAmCC,MAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AACEzB,oBAAQC,GAAR,CAAYuB,IAAZ,EAAkBC,MAAlB;AACIC,mBAFN,GAEgB,KAFhB;AAAA;AAAA,mBAGQnC,WAAWoC,MAAX,CAAkB;AACpBC,oBAAMJ,IADc;AAEpBK,sBAAQJ;AAFY,aAAlB,EAIH/B,IAJG,CAIE,UAACoC,YAAD,EAAkB;AACtB,kBAAIA,eAAe,CAAnB,EAAsB;AACpB;AACA9B,wBAAQa,IAAR,CAAgBiB,YAAhB;AACAJ,0BAAU,IAAV;AACD;AACF,aAVG,EAWHxB,KAXG,CAWG,UAACE,KAAD,EAAW;AAChB;AACAJ,sBAAQI,KAAR,CAAcA,MAAM2B,OAApB,EAA6B,OAA7B;AACD,aAdG,CAHR;;AAAA;AAAA,8CAkBSL,OAlBT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeM,a;;;;;AAqBf;;;;sEACA,kBAAgC1B,IAAhC,EAAsCC,KAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AACM0B,qBADN,GACkB,KADlB;AAAA;AAAA,mBAEQ1C,WAAW2C,MAAX,CAAkB;AACpBxB,oBAAMJ,IADc;AAEpBK,qBAAOJ;AAFa,aAAlB,EAIHb,IAJG,CAIE,UAACyC,WAAD,EAAiB;AACrB;AACAnC,sBAAQoC,IAAR,CAAgBD,WAAhB;AACAF,0BAAY,IAAZ;AACD,aARG,EASH/B,KATG,CASG,UAACC,GAAD,EAAS;AACd;AACAH,sBAAQI,KAAR,CAAcD,GAAd;AACD,aAZG,CAFR;;AAAA;AAAA,8CAgBS8B,SAhBT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeI,gB;;;;;AAmBf;;;;sEACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACMC,qBADN,GACkB,KADlB;AAAA;AAAA,mBAEQ/C,WAAWgD,MAAX,GACH7C,IADG,CACE,YAAW;AACf;AACAM,sBAAQa,IAAR,CAAa,yBAAb;AACAyB,0BAAY,IAAZ;AACD,aALG,EAKDpC,KALC,CAKK,UAASE,KAAT,EAAgB;AACvBJ,sBAAQI,KAAR,CAAcA,KAAd;AACD,aAPG,CAFR;;AAAA;AAAA,8CAUWkC,SAVX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeE,S;;;;;;sEAcf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACuBzB,UAAU,MAAV,CADvB;;AAAA;AACM0B,oBADN;AAAA;AAAA,mBAE0B1B,UAAU,SAAV,CAF1B;;AAAA;AAEM2B,uBAFN;AAAA;AAAA,mBAI8BF,WAJ9B;;AAAA;AAIMG,2BAJN;;AAKE3C,oBAAQC,GAAR,CAAY0C,eAAZ;;AALF,iBAMMA,eANN;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAOUtC,aAPV;;AAAA;AAAA;AAAA,mBAQoC2B,cAAc,MAAd,EAAsBS,QAAtB,CARpC;;AAAA;AAQQG,+BARR;AAAA;AAAA,mBASuCZ,cAAc,SAAd,EAAyBU,WAAzB,CATvC;;AAAA;AASQG,kCATR;AAAA;AAAA;;AAAA;AAWI7C,oBAAQI,KAAR,CAAc,sBAAd;;AAXJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAe0C,Y;;;;;;;AAnOf,IAAIrD,UAAU,QAAd;;AAEA,SAASK,aAAT,GAAyB;AACvB,MAAIiD,aAAa;AACfC,UAAM,SADS;AAEfC,aAAS,CAAC;AACND,YAAM,IADA;AAENE,kBAAY,IAFN;AAGNC,qBAAe;AAHT,KAAD,EAKP;AACEH,YAAM,OADR;AAEEI,eAAS,IAFX;AAGEC,gBAAUC,QAAQC,SAAR,CAAkBC;AAH9B,KALO,EAUP;AACER,YAAM,QADR;AAEEI,eAAS,IAFX;AAGEC,gBAAUC,QAAQC,SAAR,CAAkBC;AAH9B,KAVO,EAeP;AACER,YAAM,MADR;AAEEK,gBAAUC,QAAQC,SAAR,CAAkBC;AAF9B,KAfO,EAmBP;AACER,YAAM,UADR;AAEES,gBAAUH,QAAQC,SAAR,CAAkBG;AAF9B,KAnBO,EAuBP;AACEV,YAAM,MADR;AAEES,gBAAUH,QAAQC,SAAR,CAAkBC;AAF9B,KAvBO,EA2BP;AACER,YAAM,MADR;AAEEI,eAAS,IAFX;AAGEC,gBAAUC,QAAQC,SAAR,CAAkBI;AAH9B,KA3BO,EAgCP;AACEX,YAAM,MADR;AAEEK,gBAAUC,QAAQC,SAAR,CAAkBK;AAF9B,KAhCO,EAoCP;AACEZ,YAAM,OADR;AAEEK,gBAAUC,QAAQC,SAAR,CAAkBK;AAF9B,KApCO;AAFM,GAAjB;;AA6CA,MAAIC,UAAU;AACZb,UAAM,MADM;AAEZC,aAAS,CAAC;AACND,YAAM,IADA;AAENE,kBAAY,IAFN;AAGNC,qBAAe;AAHT,KAAD,EAKP;AACEH,YAAM,MADR;AAEEI,eAAS,IAFX;AAGEC,gBAAUC,QAAQC,SAAR,CAAkBC;AAH9B,KALO,EAUP;AACER,YAAM,OADR;AAEEI,eAAS,IAFX;AAGEC,gBAAUC,QAAQC,SAAR,CAAkBC;AAH9B,KAVO,EAeP;AACER,YAAM,QADR;AAEEI,eAAS,IAFX;AAGEC,gBAAUC,QAAQC,SAAR,CAAkBC;AAH9B,KAfO,EAoBP;AACER,YAAM,KADR;AAEEI,eAAS,IAFX;AAGEC,gBAAUC,QAAQC,SAAR,CAAkBK;AAH9B,KApBO,EAyBP;AACEZ,YAAM,QADR;AAEEI,eAAS,IAFX;AAGEC,gBAAUC,QAAQC,SAAR,CAAkBO,OAH9B;AAIEC,eAAS;AAJX,KAzBO;AAFG,GAAd;;AAoCA,MAAIC,eAAe;AACjBhB,UAAM,WADW;AAEjBC,aAAS,CAAC;AACND,YAAM,IADA;AAENE,kBAAY,IAFN;AAGNC,qBAAe;AAHT,KAAD,EAIJ;AACDH,YAAM,MADL;AAEDK,gBAAUC,QAAQC,SAAR,CAAkBC;AAF3B,KAJI,EAQP;AACER,YAAM,QADR;AAEEK,gBAAUC,QAAQC,SAAR,CAAkBC;AAF9B,KARO,EAYP;AACER,YAAM,MADR;AAEEK,gBAAUC,QAAQC,SAAR,CAAkBC;AAF9B,KAZO;AAFQ,GAAnB;;AAqBA,MAAIS,KAAK;AACPjB,UAAMvD,OADC;AAEPyE,YAAQ,CAACnB,UAAD,EAAac,OAAb,EAAsBG,YAAtB;AAFD,GAAT;AAIA,SAAOC,EAAP;AACD;;AAED;AACA,IAAI1E,aAAa,IAAI+D,QAAQa,QAAZ,CAAqB,IAAIC,MAAJ,CAAW,iCAAX,CAArB,CAAjB;;AAeA/D","file":"Db.js","sourcesContent":["/**\r\n * @Author: Pawan Gujral <codedoodler>\r\n * @Date:   2018-08-08T05:47:35-04:00\r\n * @Email:  goofyCoder.com\r\n * @Last modified by:   codedoodler\r\n * @Last modified time: 2018-08-10T12:30:04-04:00\r\n */\r\n\r\n\r\n\r\n'use strict';\r\n\r\nvar Db_Name = 'Dog_Db';\r\n\r\nfunction get_Db_Schema() {\r\n  var tblProduct = {\r\n    name: 'Product',\r\n    columns: [{\r\n        name: 'Id',\r\n        primaryKey: true,\r\n        autoIncrement: true\r\n      },\r\n      {\r\n        name: 'Group',\r\n        notNull: true,\r\n        dataType: JsStore.DATA_TYPE.String\r\n      },\r\n      {\r\n        name: 'Folder',\r\n        notNull: true,\r\n        dataType: JsStore.DATA_TYPE.String\r\n      },\r\n      {\r\n        name: 'Task',\r\n        dataType: JsStore.DATA_TYPE.String\r\n      },\r\n      {\r\n        name: 'Timeline',\r\n        dateType: JsStore.DATA_TYPE.Object\r\n      },\r\n      {\r\n        name: 'Type',\r\n        dateType: JsStore.DATA_TYPE.String\r\n      },\r\n      {\r\n        name: 'Date',\r\n        notNull: true,\r\n        dataType: JsStore.DATA_TYPE.DateTime\r\n      },\r\n      {\r\n        name: 'Todo',\r\n        dataType: JsStore.DATA_TYPE.Array\r\n      },\r\n      {\r\n        name: 'Notes',\r\n        dataType: JsStore.DATA_TYPE.Array\r\n      }\r\n    ]\r\n  };\r\n\r\n  var tblAuth = {\r\n    name: \"Auth\",\r\n    columns: [{\r\n        name: 'Id',\r\n        primaryKey: true,\r\n        autoIncrement: true\r\n      },\r\n      {\r\n        name: 'Name',\r\n        notNull: true,\r\n        dataType: JsStore.DATA_TYPE.String\r\n      },\r\n      {\r\n        name: 'Email',\r\n        notNull: true,\r\n        dataType: JsStore.DATA_TYPE.String\r\n      },\r\n      {\r\n        name: 'Avatar',\r\n        notNull: true,\r\n        dataType: JsStore.DATA_TYPE.String\r\n      },\r\n      {\r\n        name: 'Pin',\r\n        notNull: true,\r\n        dataType: JsStore.DATA_TYPE.Array\r\n      },\r\n      {\r\n        name: \"Logged\",\r\n        notNull: true,\r\n        dataType: JsStore.DATA_TYPE.Boolean,\r\n        default: false\r\n      }\r\n    ]\r\n  }\r\n\r\n  var tblWallpaper = {\r\n    name: 'wallpaper',\r\n    columns: [{\r\n        name: \"Id\",\r\n        primaryKey: true,\r\n        autoIncrement: true\r\n      }, {\r\n        name: \"Blob\",\r\n        dataType: JsStore.DATA_TYPE.String\r\n      },\r\n      {\r\n        name: \"Author\",\r\n        dataType: JsStore.DATA_TYPE.String\r\n      },\r\n      {\r\n        name: \"Link\",\r\n        dataType: JsStore.DATA_TYPE.String\r\n      }\r\n    ]\r\n  };\r\n\r\n  var db = {\r\n    name: Db_Name,\r\n    tables: [tblProduct, tblAuth, tblWallpaper]\r\n  }\r\n  return db;\r\n}\r\n\r\n// init\r\nvar connection = new JsStore.Instance(new Worker('./libs/db/jsstore.worker.min.js'));\r\n\r\nasync function initJsStore() {\r\n  await connection.isDbExist(Db_Name).then(function(isExist) {\r\n    if (isExist) {\r\n      connection.openDb(Db_Name);\r\n    } else {\r\n      var database = get_Db_Schema();\r\n      connection.createDb(database);\r\n      console.log(database);\r\n    }\r\n  }).catch(function(err) {\r\n    console.error(err);\r\n  })\r\n}\r\ninitJsStore();\r\n\r\n// read DB\r\nasync function __read_DB(FROM, WHERE) {\r\n  let results = [];\r\n  await connection.select({\r\n      from: FROM,\r\n      where: WHERE,\r\n    })\r\n    .then((response) => {\r\n      //TODO : Row updated message\r\n      console.info(`${response.length} Item exists`);\r\n      results = response;\r\n    })\r\n    .catch((error) => {\r\n      // TODO: Error message\r\n      console.error(error);\r\n    });\r\n\r\n  return results;\r\n}\r\n\r\n// Update DB\r\nasync function __update_DB(IN, WHERE, SET) {\r\n  let isUpdated = false;\r\n  await connection.update({ in: IN,\r\n      where: WHERE,\r\n      set: SET\r\n    })\r\n    .then((rowsUpdated) => {\r\n      //TODO : Row updated message\r\n      console.info(`${rowsUpdated} rows updated`);\r\n      isUpdated = true;\r\n    })\r\n    .catch((error) => {\r\n      //TODO: Error message\r\n      console.error(error);\r\n    });\r\n\r\n  return isUpdated;\r\n}\r\n\r\n// add Item DB\r\nasync function __add_Item_DB(INTO, VALUES) {\r\n  console.log(INTO, VALUES);\r\n  let isAdded = false;\r\n  await connection.insert({\r\n      into: INTO,\r\n      values: VALUES\r\n    })\r\n    .then((rowsInserted) => {\r\n      if (rowsInserted > 0) {\r\n        //TODO : Data added message\r\n        console.info(`${rowsInserted} successfully  added`);\r\n        isAdded = true;\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      //TODO: Error message\r\n      console.error(error.message, \"error\");\r\n    });\r\n  return isAdded;\r\n}\r\n\r\n// Remove Item DB\r\nasync function __remove_Item_DB(FROM, WHERE) {\r\n  let isRemoved = false;\r\n  await connection.remove({\r\n      from: FROM,\r\n      where: WHERE,\r\n    })\r\n    .then((rowsDeleted) => {\r\n      //TODO : Data deleted message\r\n      console.warn(`${rowsDeleted} deleted!`);\r\n      isRemoved = true;\r\n    })\r\n    .catch((err) => {\r\n      //TODO: Error message\r\n      console.error(err);\r\n    });\r\n\r\n  return isRemoved;\r\n}\r\n\r\n// Drop DB\r\nasync function __drop_DB() {\r\n  let DB_Erased = false;\r\n  await connection.dropDb()\r\n    .then(function() {\r\n      //TODO : DB deleted message\r\n      console.info('Db deleted successfully');\r\n      DB_Erased = true;\r\n    }).catch(function(error) {\r\n      console.error(error);\r\n    });\r\n    return DB_Erased;\r\n}\r\n\r\n\r\nasync function __refresh_DB() {\r\n  let authData = await __read_DB(\"Auth\");\r\n  let productData = await __read_DB(\"Product\");\r\n\r\n  let isTable_Refresh = await __drop_DB();\r\n  console.log(isTable_Refresh);\r\n  if (isTable_Refresh) {\r\n    await initJsStore();\r\n    let isAuth_Table_Update = await __add_Item_DB(\"Auth\", authData);\r\n    let isProduct_Table_Update = await __add_Item_DB(\"Product\", productData);\r\n  } else {\r\n    console.error(\"Something went wrong\");\r\n  }\r\n\r\n\r\n}\r\n"]}