{"version":3,"sources":["../src/wallpaper.js"],"names":["__read_DB","data","currentDate","Date","getFullYear","getMonth","toString","length","getDate","upcoming","filter","value","index","arr","Timeline","undefined","endDate","chrome","browserAction","setBadgeText","text","setBadgeBackgroundColor","color","upcoming_tasks","wallpaperQuery","localStorage","getItem","unsplashAPIConfig","query","featured","orientation","width","key","count","covertToBlob","xhr","XMLHttpRequest","open","urls","custom","responseType","addEventListener","status","blob","response","imgURL","URL","createObjectURL","update_Wallpaper_DB","send","isBG_There","__update_DB","Id","Blob","Author","user","name","Link","links","html","isBG_Updated","__add_Item_DB","isBG_Added","__request_Wallpaper","image_URL","fetch","then","json","res","catch","error","console","tabs","onCreated","addListener","tab","active","runtime","onMessage","request","sender","sendResponse","type"],"mappings":"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","file":"wallpaper.js","sourcesContent":["/************\r\n *  Fetch Background image request from Unsplash\r\n * ********/\r\n\r\n(function() {\r\n  // Wallpaper config\r\n  let wallpaperQuery = localStorage.getItem('DOG_Wallpaper_Category') || \"Nature\";\r\n  const unsplashAPIConfig = {\r\n    query: wallpaperQuery,\r\n    featured: true,\r\n    orientation: \"landscape\",\r\n    width: 1500,\r\n    key: \"6bf5d1667179306d00b370fb1b980230b6ee65b5a4bd7de73eebd5046e30f8cb\",\r\n    count: 1\r\n  }\r\n\r\n  // Covert to Blob\r\n  const covertToBlob = function(data) {\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.open(\"GET\", data[0].urls.custom, true);\r\n    // Set the responseType to blob\r\n    xhr.responseType = \"blob\";\r\n    xhr.addEventListener(\"load\", function() {\r\n      if (xhr.status === 200) {\r\n        // File as response\r\n        let blob = xhr.response;\r\n        // Put the received blob into IndexedDB\r\n        let imgURL = URL.createObjectURL(blob);\r\n\r\n        update_Wallpaper_DB(imgURL, data);\r\n      }\r\n    }, false);\r\n    // Send XHR\r\n    xhr.send();\r\n  }\r\n  // Check for DB\r\n  const update_Wallpaper_DB = async function(blob, data) {\r\n    let isBG_There = await __read_DB(\"wallpaper\");\r\n    if (isBG_There.length) {\r\n      let isBG_Updated = await __update_DB(\"wallpaper\", {\r\n        Id: 1\r\n      }, {\r\n        Blob: blob,\r\n        Author: data[0].user.name,\r\n        Link: data[0].links.html\r\n      });\r\n    } else {\r\n      let isBG_Added = await __add_Item_DB(\"wallpaper\", [{\r\n        Blob: blob,\r\n        Author: data[0].user.name,\r\n        Link: data[0].links.html\r\n      }]);\r\n    }\r\n  }\r\n  // Request for wallpaper\r\n  const __request_Wallpaper = async function() {\r\n    let image_URL = 'https://api.unsplash.com/photos/random?query=' + unsplashAPIConfig.query + '&count=' + unsplashAPIConfig.count + '&featured=' + unsplashAPIConfig.featured + '&w=' + unsplashAPIConfig.width + '&orientation=' + unsplashAPIConfig.orientation + '&client_id=' + unsplashAPIConfig.key;\r\n    fetch(image_URL).then((response) => {\r\n      return response.json();\r\n    }).then((res) => {\r\n      covertToBlob(res);\r\n    }).catch((error) => {\r\n      console.error(error, \"error\");\r\n    });\r\n  }\r\n  // Request for wallpaper when new tab open\r\n  chrome.tabs.onCreated.addListener((tab) => {\r\n    if (tab.active) {\r\n      __request_Wallpaper();\r\n    }\r\n  });\r\n\r\n\r\n\r\n  // Update Badge with upcoming Tasks\r\n  async function upcoming_tasks () {\r\n    let data = await __read_DB(\"Product\");\r\n    let currentDate = new Date();\r\n    currentDate = `${currentDate.getFullYear()}-${currentDate.getMonth().toString().length == 1 ? \"0\" + currentDate.getMonth() : currentDate.getMonth()}-${currentDate.getDate().toString().length == 1 ? \"0\" + currentDate.getDate() : currentDate.getDate()}`;\r\n    let upcoming = data.filter((value, index, arr) => {\r\n      if(value.Timeline != undefined) {\r\n        if(value.Timeline.endDate == currentDate) {\r\n          return value;\r\n        }\r\n      }\r\n    });\r\n\r\n    if(upcoming.length.toString() != 0 ) {\r\n      chrome.browserAction.setBadgeText({text : upcoming.length.toString()});\r\n      chrome.browserAction.setBadgeBackgroundColor({color : \"#fa5252\"});\r\n    }\r\n  }\r\n\r\n  chrome.runtime.onMessage.addListener(function (request, sender, sendResponse) {\r\n    if(request.type == \"badge\") {\r\n      upcoming_tasks();\r\n    }\r\n  });\r\n\r\n  upcoming_tasks();\r\n})();\r\n"]}